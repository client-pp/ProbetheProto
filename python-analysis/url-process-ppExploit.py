#python3

import os, logging
from tqdm import tqdm
from pprint import pprint

write_root_path = "/home/zfk/Documents/sanchecker/src/"

# root_path = "/media/data1/zfk/Documents/sanchecker/src/recursive_pp_logs"
# root_path = "/media/data1/zfk/Documents/sanchecker/src/recursive_pp_pattern1_rankmorethan10k_logs"
#root_path = "/home/zfk/Documents/sanchecker/src/recursive_pp_pattern1_0to200k_logs"
#ppfound_str = 'ppFOUND!'

# root_path = "/media/data1/zfk/Documents/sanchecker/src/check_pp_logs"
# root_path = "/media/data1/zfk/Documents/sanchecker/src/check_pp_pattern1_rankmorethan10k_logs"
# root_path = "/home/zfk/Documents/sanchecker/src/modify_cookie_pp_0to600kplus_logs" 
# root_path = "/home/zfk/Documents/sanchecker/src/check_pp_pattern1_0to600kplus_logs"
root_path = "/home/zfk/Documents/sanchecker/src/check_ppExploit_42_websites_url_src_to_pp_again_0to600kplus_logs"
ppfound_str = 'ppExploitFOUND'

key2_str = '"KEY2"'
value_str = '"VALUE0"'
target_str = key2_str + value_str
# Now only support URL-search checking

#logging.basicConfig(filename=os.path.join(root_path, "possible_pp.log"), #"warning_mismatch_key_value_type.log"),
#                            filemode='a',
#                            level=logging.INFO)
## warning_logger = logging.getLogger('warning_logger')
#possible_pp_logger = logging.getLogger('possible_pp_logger')

# possible_pp_website_record_name = "vul_to_storages_websites_0to600kplus.txt"
possible_pp_website_record_name = "vul_to_url_websites_pattern1_0to600kplus.txt"

# Not used for now
def parse_ppfound(line:str, idx:int, file:str, websites_set:set):
    # line format: 
    # ppfound_str KeyTaintType <key_type> ValueTaintType <value_type> MessageId <id> <str_contents>
    assert ppfound_str in line
    items = line.split(' ')
    if len(items) != 8:
        return None
    flag = (ppfound_str in line) +\
      (ppfound_str == items[0]) +\
      ('KeyTaintType' == items[1]) +\
      ('ValueTaintType' == items[3])
    if flag != 4:
        return None
    key_type = items[2]
    value_type = items[4]
    str_contents = items[-1] # TODO: string processing

    if str_contents[:len(target_str)] == target_str:
        site = file.replace('_log_file','').replace('_', '.')
        websites_set.add(site)
        # possible_pp_logger.info(f'{file}:{idx} {line}')
        # with open(os.path.join(root_path, possible_pp_website_record_name), 'a') as f0:
        #     site = file.replace('_log_file','').replace('_', '.')
        #     f0.write(f'{site}\n')

    # if key_type != value_type:
    #     warning_logger.info(f'{file}:{idx} warning {line}')

    return [key_type, value_type]


if __name__ == "__main__":

    import codecs
    count_domain = 0
    count_flow = 0
    total = 0
    source_type_dict = {}
    website_set = set()
    for file in tqdm(os.listdir(root_path)):
        if "log_file" in file:
            # print(f"Checking {file} ...")
            total += 1
            with codecs.open(os.path.join(root_path, file), 'r', encoding='utf-8', errors='replace') as f0:
                contents = f0.read()
                if not ppfound_str in contents:
                    continue

                count_domain += 1
                for idx, line in enumerate(contents.split('\n')):
                    if not ppfound_str in line:
                        continue
                    url = line[line.find('"ppExploitFOUND ')+len('"ppExploitFOUND '):line.find('/?')]
                    # print(file.replace('_log_file','').replace('_', '.'), ' ', line)
                    #print(file.replace('_log_file','').replace('_', '.'))
                    #count_domain += 1
                    # website_set.add(file.replace('_log_file','').replace('_', '.')) #line.split(' ')[-1])
                    website_set.add(url)
                    
                    #results = parse_ppfound(line, idx, file, website_set)
                    #if not results:
                    #    continue
                    #key_type, value_type = results[0], results[1]
                    #if not value_type in source_type_dict.keys(): # count according to value_type
                    #    source_type_dict[value_type] = 0
                    #source_type_dict[value_type] += 1
                    #count_flow += 1


    #pprint(source_type_dict)
    #pprint(website_set)
    with open("/home/zfk/Documents/sanchecker/src/42_websites_url_src_to_pp_again_0to600kplus.txt", 'r') as fg:
        site_list = [each.split(',')[1].rstrip() for each in fg.readlines()]
    tp_site_set = set()
    for result in website_set:
        for candidate in site_list:
            if candidate in result:
                tp_site_set.add(candidate)
                break
        else:
            print(result, ' not found!')
    print(len(tp_site_set), tp_site_set)
    pprint([each+"/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv" for each in site_list if each not in tp_site_set])
    # print("URL-search exploitable sites: ", len(website_set), " total vul sites: ", count_domain, " total domains: ", total, "total vul fraction: ", float(count_domain)/float(total), " flow counts: ", count_flow)
    # with open(os.path.join(write_root_path, possible_pp_website_record_name), 'w') as ff:
    #     websites_to_pp = '\n'.join([str(idx)+','+each for idx,each in zip(range(len(website_set)),website_set)])
    #     ff.write(websites_to_pp)
    ['furmansound.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',
 'cdjapan.co.jp/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv', # DoS https://www.cdjapan.co.jp/?__proto__[testk]=testv
 'elancontrolsystems.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',N
 'octoperf.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',N
 'furmanpower.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',# same with furmansound.com
 'cstv.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv', # same with cbssports.com
 'imoney.my/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',
 'panamax.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',
 'open.fm/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',
 'bdtickets.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv', # https://bdtickets.com/faq/?__proto__[testk]=testv has a DoS
 'uconnectlabs.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',N
 'sixthman.net/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',N
 'mamapedia.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',
 'unimedrio.com.br/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',
 'hawaiilife.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv', # DoS https://www.hawaiilife.com/listings/888-kapiolani-boulevard-1209-honolulu-hi-96813?__proto__[testk]=testv
 'geheugenvannederland.nl/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv', # DoS https://geheugen.delpher.nl/?__proto__[testk]=testv
 'gloriafood.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',
 'talentera.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',
 'mobilock.in/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv', # DoS https://scalefusion.com/faq/?__proto__[testk]=testv#faq_7 (some onclick fail)
 'blogmutt.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv', # DoS https://www.verblio.com/meet-our-writers?__proto__[testk]=testv (some functionality lost)
 'theunitutor.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv', # DoS https://www.theunitutor.com/?__proto__%5Btestk%5D=testv%3F__proto__%5Btestk%5D%3Dtestv
 'colleee.net/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv', # DoS https://colleee.net/?__proto__[testk]=testv
 '2gig.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',
 'scalefusion.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv',
 'rockettheme.com/?__proto__[testk]=testv&__proto__.testk=testv&constructor[prototype][testk]=testv'] N
